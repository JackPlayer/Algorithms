See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

SpotBugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  14/41 tests passed
Memory:       1/1 tests passed
Timing:       39/41 tests passed

Aggregate score: 59.51%
[Compilation: 5%, API: 5%, SpotBugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.8K Nov 24 23:51 BruteCollinearPoints.java
4.4K Nov 24 23:51 FastCollinearPoints.java
4.2K Nov 24 23:51 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac LineSegment.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P SIC_INNER_SHOULD_BE_STATIC_ANON SIC: Should the anonymous inner class 'Point$1Comp' be refactored into a named static nested class?  At Point.java:[lines 104-108]
SpotBugs ends with 1 warning.


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:40:20: '(' is followed by whitespace. [ParenPad]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - number of entries in student   solution: 2
    - number of entries in reference solution: 4
    - 2 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 5
    - 4 missing entries in student solution, including:
      '(2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)'


  * filename = horizontal25.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 25
    - 24 missing entries in student solution, including:
      '(8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)'


==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
    - number of entries in student   solution: 1
    - number of entries in reference solution: 5
    - 4 missing entries in student solution, including:
      '(6418, 20364) -> (9494, 20364) -> (11022, 20364) -> (12386, 20364)'


    - failed on trial 1 of 250
     20
     12336 16559
      7638  2570
      8798  2570
      2562 20116
      6912  1941
     12386 20364
     16279  2570
      5628 16559
     19915 16559
      6418 20364
      8517 20116
      9494 20364
      3781  2570
     14039 20116
      9070  1941
      4811 16559
      3106  1941
     11022 20364
     17617 20116
     15488  1941

  * 10 random horizontal line segments
    - number of entries in student   solution: 1
    - number of entries in reference solution: 10
    - 9 missing entries in student solution, including:
      '(3575, 20098) -> (10106, 20098) -> (15174, 20098) -> (17928, 20098)'


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - number of entries in student   solution: 1
    - number of entries in reference solution: 15
    - 14 missing entries in student solution, including:
      '(1666, 16626) -> (6543, 16626) -> (7744, 16626) -> (12875, 16626)'


    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 5
    - 4 missing entries in student solution, including:
      '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 25
    - 24 missing entries in student solution, including:
      '(19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
    - number of entries in student   solution: 1
    - number of entries in reference solution: 5
    - 4 missing entries in student solution, including:
      '(20580, 9445) -> (20580, 9799) -> (20580, 14671) -> (20580, 19689)'


    - failed on trial 1 of 250
     20
      1062 14196
     16548 10670
     10809 19660
     10809 12367
     16446 12129
     10809  8028
     16446  8012
     20580  9799
      1062  5268
     20580 14671
     20580 19689
      1062 14058
     20580  9445
     16548  4552
     16548 15141
     10809 19495
     16446 17742
     16548 10857
      1062 16655
     16446  4067

  * 10 random vertical line segments
    - number of entries in student   solution: 1
    - number of entries in reference solution: 10
    - 9 missing entries in student solution, including:
      '(1992, 14161) -> (1992, 14230) -> (1992, 14557) -> (1992, 18642)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 1
    - number of entries in reference solution: 15
    - 14 missing entries in student solution, including:
      '(7284, 11518) -> (7284, 13824) -> (7284, 19362) -> (7284, 20748)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - number of entries in student   solution: 2
    - number of entries in reference solution: 4
    - 2 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


==> FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - number of entries in student   solution: 2
    - number of entries in reference solution: 4
    - 2 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 28 of 50

==> FAILED

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
    - number of entries in student   solution: 4
    - number of entries in reference solution: 5
    - 1 missing entry in student solution:
      '(10767, 12119) -> (10767, 12254) -> (10767, 13010) -> (10767, 14090)'


    - failed on trial 4 of 250
     20
      6098  6411
     10767 14090
     11779 10665
      8964  4793
      5524  3473
      5129  6360
      9405  4585
     10767 12119
     10767 12254
      9405  5159
     10767 13010
      5661  6388
      8515  7367
      9283  8143
      7843  6688
      5438  3440
      9405  8111
      6193  6416
      9405  5733
      7330  4166

  * 10 random line segments
    - number of entries in student   solution: 9
    - number of entries in reference solution: 10
    - 1 missing entry in student solution:
      '(12503, 4352) -> (12503, 6350) -> (12503, 6720) -> (12503, 7904)'


    - failed on trial 1 of 100

  * 15 random line segments
    - number of entries in student   solution: 13
    - number of entries in reference solution: 15
    - 2 missing entries in student solution, including:
      '(2164, 10976) -> (2247, 10976) -> (7061, 10976) -> (8140, 10976)'


    - failed on trial 1 of 50

==> FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
      5128 30545
     25748 30452
     null
     12663 27989
      7947 13757
      4062  5989
     19220  2699
       411 15537
     10146 28180
      9897  7340

  * Point[] of length 10, number of null entries = 10
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     null
     null
     null
     null
     null
     null
     null
     null
     null
     null

  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
     27088  8538
     29097  6794
     null
     16891  2908

  * Point[] of length 3, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     3
      3401  4108
     11266 17348
     null

  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
     26278 15110
     null

  * Point[] of length 1, number of null entries = 1
==> FAILED

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 6/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 6
    - 3 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 6
    - 3 missing entries in student solution, including:
      '(3250, 17450) -> (8500, 17450) -> (13400, 17450) -> (17250, 17450)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 5
    - 4 missing entries in student solution, including:
      '(2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)'


  * filename = horizontal25.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 25
    - 24 missing entries in student solution, including:
      '(8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)'


  * filename = horizontal50.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 50
    - 49 missing entries in student solution, including:
      '(5249, 20754) -> (5559, 20754) -> (14800, 20754) -> (17428, 20754)'


  * filename = horizontal75.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 75
    - 74 missing entries in student solution, including:
      '(1536, 20976) -> (6545, 20976) -> (14178, 20976) -> (14591, 20976)'


  * filename = horizontal100.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 100
    - 99 missing entries in student solution, including:
      '(5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)'


==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(14559, 16558) -> (17979, 16558) -> (18285, 16558) -> (20504, 16558)'


    - failed on trial 1 of 500
     4
     18285 16558
     17979 16558
     14559 16558
     20504 16558

  *  5 random horizontal line segments
    - number of entries in student   solution: 1
    - number of entries in reference solution: 5
    - 4 missing entries in student solution, including:
      '(2493, 20651) -> (5553, 20651) -> (10888, 20651) -> (16429, 20651)'


    - failed on trial 1 of 250
     20
     11202  6618
     16429 20651
      6481  6618
      4602  6470
     15084  6470
     10888 20651
     20280  6618
      1784 19776
      4034  5048
      7018  6618
      2076  5048
     11083 19776
     14184 19776
     16438 19776
      3687  5048
     12480  5048
      2493 20651
      5553 20651
     20839  6470
     14701  6470

  * 10 random horizontal line segments
    - number of entries in student   solution: 1
    - number of entries in reference solution: 10
    - 9 missing entries in student solution, including:
      '(1833, 17755) -> (9177, 17755) -> (10513, 17755) -> (15897, 17755)'


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - number of entries in student   solution: 1
    - number of entries in reference solution: 15
    - 14 missing entries in student solution, including:
      '(12116, 20426) -> (12611, 20426) -> (16857, 20426) -> (18434, 20426)'


    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including:
      '(19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)'


  * filename = vertical50.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 50
    - 50 missing entries in student solution, including:
      '(5991, 15606) -> (5991, 20227) -> (5991, 20340) -> (5991, 20424)'


  * filename = vertical75.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 75
    - 75 missing entries in student solution, including:
      '(13780, 16365) -> (13780, 17494) -> (13780, 18253) -> (13780, 18908)'


  * filename = vertical100.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 100
    - 100 missing entries in student solution, including:
      '(15135, 15588) -> (15135, 17398) -> (15135, 19476) -> (15135, 20439)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(4604, 1280) -> (4604, 7039) -> (4604, 11610) -> (4604, 11953)'


    - failed on trial 1 of 500
     4
      4604 11610
      4604 11953
      4604  7039
      4604  1280

  *  5 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(9687, 11547) -> (9687, 18958) -> (9687, 20556) -> (9687, 20793)'


    - failed on trial 1 of 250
     20
      1105 12116
     17418 10415
     19573  4867
      1105 13927
     12374 12688
     17418 16830
      9687 20793
     12374  5278
     19573 10416
     19573 11472
     12374 18262
      9687 11547
     17418 17340
      9687 18958
      9687 20556
      1105 20132
     19573 15629
     12374 15176
     17418 18113
      1105  5168

  * 10 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including:
      '(15465, 12790) -> (15465, 13226) -> (15465, 15738) -> (15465, 20764)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including:
      '(17979, 9546) -> (17979, 12059) -> (17979, 13370) -> (17979, 20080)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 1000) -> (8000, 8000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(1000, 1000) -> (8000, 8000)'

    - 1 missing entry in student solution:
      '(1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 18000) -> (3500, 28000)
    - reference segment 1: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 2
    - 1 extra entry in student solution:
      '(1000, 18000) -> (3500, 28000)'

    - 1 missing entry in student solution:
      '(1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4096, 20992) -> (4096, 24064)
    - reference segment 3: (4096, 20992) -> (4096, 22016) -> (4096, 23040) -> (4096, 24064) -> (4096, 25088)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 5
    - 1 extra entry in student solution:
      '(4096, 20992) -> (4096, 24064)'

    - 4 missing entries in student solution, including:
      '(4160, 29184) -> (5120, 29184) -> (6144, 29184) -> (7168, 29184) -> (8192, 29184)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 2000) -> (1000, 23000)
    - reference segment 5: (1000, 2000) -> (1000, 9000) -> (1000, 13000) -> (1000, 23000) -> (1000, 26000)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 7
    - 1 extra entry in student solution:
      '(1000, 2000) -> (1000, 23000)'

    - 3 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 12: (25000, 8000) -> (25000, 29000)
    - reference segment 28: (25000, 8000) -> (25000, 9000) -> (25000, 12000) -> (25000, 27000) -> (25000, 29000) -> (25000, 31000)

    - number of entries in student   solution: 14
    - number of entries in reference solution: 31
    - 1 extra entry in student solution:
      '(25000, 8000) -> (25000, 29000)'

    - 18 missing entries in student solution, including:
      '(13000, 29000) -> (19000, 29000) -> (25000, 29000) -> (28000, 29000)'


  * filename = input300.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (7300, 10050) -> (7300, 25700)
    - reference segment 5: (7300, 10050) -> (7300, 10450) -> (7300, 17000) -> (7300, 25700) -> (7300, 31650)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 1 extra entry in student solution:
      '(7300, 10050) -> (7300, 25700)'

    - 3 missing entries in student solution, including:
      '(3250, 17450) -> (8500, 17450) -> (13400, 17450) -> (17250, 17450)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (0, 0) -> (0, 25000)
    - reference segment 4: (0, 0) -> (0, 5000) -> (0, 10000) -> (0, 11000) -> (0, 15000) -> (0, 20000) -> (0, 25000) -> (0, 30000)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 1 extra entry in student solution:
      '(0, 0) -> (0, 25000)'

    - 1 missing entry in student solution:
      '(0, 0) -> (0, 5000) -> (0, 10000) -> (0, 11000) -> (0, 15000) -> (0, 20000) -> (0, 25000) -> (0, 30000)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 15: (21030, 1952) -> (21030, 3113)
    - reference segment 282: (21030, 1952) -> (21030, 2339) -> (21030, 2726) -> (21030, 3113) -> (21030, 3500)

    - number of entries in student   solution: 205
    - number of entries in reference solution: 288
    - 1 extra entry in student solution:
      '(21030, 1952) -> (21030, 3113)'

    - 84 missing entries in student solution, including:
      '(19412, 29763) -> (19711, 29763) -> (20010, 29763) -> (20309, 29763) -> (20608, 29763)'


  * filename = rs1423.txt
    - number of entries in student   solution: 438
    - number of entries in reference solution: 443
    - 5 missing entries in student solution, including:
      '(23913, 20127) -> (24263, 20127) -> (24613, 20127) -> (24963, 20127)'


==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1

    FastCollinearPoints.<init>(FastCollinearPoints.java:45)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test6(TestFastCollinearPoints.java:331)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * filename = input2.txt
  * filename = input3.txt
==> FAILED

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 6
    - 3 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 6
    - 3 missing entries in student solution, including:
      '(3250, 17450) -> (8500, 17450) -> (13400, 17450) -> (17250, 17450)'


==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 6
    - 3 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(5664, 4048) -> (6848, 4716) -> (8624, 5718) -> (13952, 8724)'


    - failed on trial 1 of 500
     4
     13952  8724
      8624  5718
      6848  4716
      5664  4048

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (10533, 9026) -> (9411, 3614)
    - reference segment 2: (8663, 6) -> (8935, 1318) -> (9411, 3614) -> (10533, 9026)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 5
    - 1 extra entry in student solution:
      '(10533, 9026) -> (9411, 3614)'

    - 3 missing entries in student solution, including:
      '(8086, 826) -> (8112, 2564) -> (8177, 6909) -> (8255, 12123)'


    - failed on trial 2 of 500
     20
      8177  6909
      8257  1365
      7216  1754
     10533  9026
      3855   248
     15166 10294
     19936 15418
     10453  4869
      7891   781
      8112  2564
      8086   826
     13381  9541
      4615  4880
      8663     6
      8255 12123
      8011  2608
      9411  3614
      8935  1318
      4710  5459
      5850 12407

  * 25 random line segments
    - number of entries in student   solution: 24
    - number of entries in reference solution: 25
    - 1 missing entry in student solution:
      '(6156, 861) -> (6394, 1949) -> (7108, 5213) -> (8536, 11741)'


    - failed on trial 5 of 100

  * 50 random line segments
    - number of entries in student   solution: 49
    - number of entries in reference solution: 50
    - 1 missing entry in student solution:
      '(6111, 7946) -> (6119, 8202) -> (6141, 8906) -> (6201, 10826)'


    - failed on trial 2 of 15

  * 100 random line segments
==> FAILED

Test 10: random line segments
  *  1 random line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(2394, 7535) -> (2880, 7535) -> (3447, 7535) -> (5877, 7535)'


    - failed on trial 1 of 500
     4
      3447  7535
      2880  7535
      5877  7535
      2394  7535

  *  5 random line segments
    - number of entries in student   solution: 4
    - number of entries in reference solution: 5
    - 1 missing entry in student solution:
      '(10919, 7531) -> (10919, 8308) -> (10919, 8791) -> (10919, 9232)'


    - failed on trial 1 of 500
     20
     10267  2670
     10919  8308
     13650  5484
      7166 13508
     10919  7531
     12717  5020
     12495  3468
     10919  8791
      7320 13508
      5641  8510
     14915  7692
      7199 13508
      6330 13508
      8152 10049
     12440  3372
      4897  8054
     11982  4315
     13844  6101
      8710 10391
     10919  9232

  * 25 random line segments
    - number of entries in student   solution: 24
    - number of entries in reference solution: 25
    - 1 missing entry in student solution:
      '(4547, 13961) -> (4890, 13961) -> (5233, 13961) -> (6556, 13961)'


    - failed on trial 1 of 100

  * 50 random line segments
    - number of entries in student   solution: 43
    - number of entries in reference solution: 50
    - 7 missing entries in student solution, including:
      '(7095, 13742) -> (8489, 13742) -> (8659, 13742) -> (9033, 13742)'


    - failed on trial 1 of 15

  * 100 random line segments
    - number of entries in student   solution: 77
    - number of entries in reference solution: 100
    - 23 missing entries in student solution, including:
      '(6235, 14045) -> (6301, 14045) -> (6796, 14045) -> (7192, 14045)'


    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4, 3) -> (0, 7)
    - reference segment 0: (6, 1) -> (4, 3) -> (2, 5) -> (0, 7)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(4, 3) -> (0, 7)'

    - 1 missing entry in student solution:
      '(6, 1) -> (4, 3) -> (2, 5) -> (0, 7)'


    - failed on trial 222 of 500
     5
         5     3
         6     1
         4     3
         2     5
         0     7

  * 10 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(3, 3) -> (3, 4) -> (3, 6) -> (3, 9)'


    - failed on trial 11 of 500
     10
         7     9
         3     3
         9     7
         0     5
         3     4
         3     9
         3     6
         2     5
         8     1
         7     8

  * 50 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (0, 0) -> (0, 7)
    - reference segment 31: (0, 0) -> (0, 2) -> (0, 4) -> (0, 5) -> (0, 6) -> (0, 7) -> (0, 9)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 39
    - 1 extra entry in student solution:
      '(0, 0) -> (0, 7)'

    - 30 missing entries in student solution, including:
      '(0, 9) -> (2, 9) -> (3, 9) -> (7, 9) -> (8, 9)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 7: (0, 0) -> (0, 8)
    - reference segment 111: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (0, 5) -> (0, 6) -> (0, 7) -> (0, 8) -> (0, 9)

    - number of entries in student   solution: 16
    - number of entries in reference solution: 121
    - 1 extra entry in student solution:
      '(0, 0) -> (0, 8)'

    - 106 missing entries in student solution, including:
      '(0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (0, 0) -> (0, 22)
    - reference segment 191: (0, 0) -> (0, 2) -> (0, 20) -> (0, 22) -> (0, 38)

    - number of entries in student   solution: 48
    - number of entries in reference solution: 219
    - 1 extra entry in student solution:
      '(0, 0) -> (0, 22)'

    - 172 missing entries in student solution, including:
      '(19, 48) -> (24, 48) -> (25, 48) -> (42, 48) -> (44, 48)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - number of entries in student   solution: 3
    - number of entries in reference solution: 10
    - 7 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3)'


  * 5-by-5 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (0, 0) -> (0, 3)
    - reference segment 11: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (0, 4)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 16
    - 1 extra entry in student solution:
      '(0, 0) -> (0, 3)'

    - 13 missing entries in student solution, including:
      '(0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4)'


  * 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 8: (0, 0) -> (0, 8)
    - reference segment 144: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (0, 4) -> (0, 5) -> (0, 6) -> (0, 7) -> (0, 8) -> (0, 9)

    - number of entries in student   solution: 16
    - number of entries in reference solution: 154
    - 1 extra entry in student solution:
      '(0, 0) -> (0, 8)'

    - 139 missing entries in student solution, including:
      '(0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)'


  * 20-by-20 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 24: (0, 0) -> (0, 18)
    - reference segment 2426: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (0, 4) -> (0, 5) -> (0, 6) -> (0, 7) -> (0, 8) -> (0, 9) -> (0, 10) -> (0, 11) -> (0, 12) -> (0, 13) -> (0, 14) -> (0, 15) -> (0, 16) -> (0, 17) -> (0, 18) -> (0, 19)

    - number of entries in student   solution: 48
    - number of entries in reference solution: 2446
    - 1 extra entry in student solution:
      '(0, 0) -> (0, 18)'

    - 2399 missing entries in student solution, including:
      '(0, 19) -> (1, 19) -> (2, 19) -> (3, 19) -> (4, 19) -> (5, 19) -> (6, 19) -> (7, 19) -> (8, 19) -> (9, 19) -> (10, 19) -> (11, 19) -> (12, 19) -> (13, 19) -> (14, 19) -> (15, 19) -> (16, 19) -> (17, 19) -> (18, 19) -> (19, 19)'


  * 5-by-4 grid
    - number of entries in student   solution: 3
    - number of entries in reference solution: 13
    - 10 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3)'


  * 6-by-4 grid
    - number of entries in student   solution: 3
    - number of entries in reference solution: 16
    - 13 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3)'


  * 10-by-4 grid
    - number of entries in student   solution: 7
    - number of entries in reference solution: 38
    - 31 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3)'


  * 15-by-4 grid
    - number of entries in student   solution: 9
    - number of entries in reference solution: 79
    - 70 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3)'


  * 25-by-4 grid
    - number of entries in student   solution: 17
    - number of entries in reference solution: 213
    - 196 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3) -> (15, 3) -> (16, 3) -> (17, 3) -> (18, 3) -> (19, 3) -> (20, 3) -> (21, 3) -> (22, 3) -> (23, 3) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     12279 31614
     27956  5040
      3838  8297
     25095 10329
     30818 23402
     null
       294  2413
      7164 24327
      4847 12575
      8065 26272

  * Point[] of length 10, number of null entries = 10
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     null
     null
     null
     null
     null
     null
     null
     null
     null
     null

  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
     null
      9520 19753
     27020 21186
      2571 18658

  * Point[] of length 3, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     3
     24803  3148
     18406 31955
     null

  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
     null
      4023 14778

  * Point[] of length 1, number of null entries = 1
==> FAILED

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 5/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01       57122           0          57122                  283
=> passed    32   0.02     1414562           0        1414562                 1111
=> passed    64   0.11    27691682           0       27691682                 4334
=> passed   128   1.49   488281250           0      488281250                16996
=> passed   256  31.19  8194304162           0     8194304162                67005
Aborting: time limit of 10 seconds exceeded
Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00       58802           0          58802                  626
=> passed    32   0.03     1423832           0        1423832                 1957
=> passed    64   0.14    27734558           0       27734558                 6192
=> passed   128   1.98   488465054           0      488465054                20902
=> passed   256  31.99  8195064734           0     8195064734                75015
Aborting: time limit of 10 seconds exceeded
Total: 8/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01       12032       18531          49094                22568
=> passed   128   0.01       48640       89535         227710               105255
=> passed   256   0.03      195584      415398        1026380               480639
=> passed   512   0.20      784384     1895195        4574774              2152149
=> passed  1024   0.42     3141608     8546965       20235538              9585408
=> passed  2048   1.32    12574582    38056527       88687636             42361365
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (88687636 / 20235538) = 2.13
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        4224        4764          13752                11050
=> passed   128   0.00       16640       17796          52232                39183
=> passed   256   0.00       66048       68717         203482               145037
=> passed   512   0.02      263168      269399         801966               554170
=> passed  1024   0.06     1050624     1065026        3180676              2160411
=> passed  2048   0.23     4198400     4231214       12660828              8521713
=> passed  4096   0.29    16785408    16859163       50503734             33833460
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (50503734 / 12660828) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8488       14906          38300                20732
=> passed   128   0.00       33704       43854         121412                78966
=> passed   256   0.01      134312      149618         433548               304190
=> passed   512   0.04      536232      548156        1632544              1183372
=> passed  1024   0.14     2142888     2087496        6317880              4647246
=> passed  2048   0.42     8567464     8122445       24812354             18351843
=> passed  4096   1.82    34261672    31990953       98243578             72823750
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (98243578 / 24812354) = 1.99
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8536       18045          44626                22700
=> passed   128   0.00       33952       75863         185678               100491
=> passed   256   0.01      135344      232229         599802               400847
=> passed   512   0.06      540432      854545        2249522              1582696
=> passed  1024   0.21     2159720     3260991        8681702              6283486
=> passed  2048   0.60     8634856    12699218       34033292             25034864
=> passed  4096   2.32    34531288    50043244      134617776             99823702
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (134617776 / 34033292) = 1.98
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================